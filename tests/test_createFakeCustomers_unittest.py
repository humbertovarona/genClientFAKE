
# Generated by CodiumAI

import unittest

class TestCreatefakecustomers(unittest.TestCase):

    #  The function generates fake customer data and inserts it into a SQLite database.
    def test_generate_fake_customer_data(self):
        # Arrange
        databasename = "test.db"
        max_clients = 1000
        max_age = 75

        # Act
        createFakeCustomers(databasename, max_clients, max_age)

        # Assert
        # Check if the table 'fakeCustomers' exists in the database
        conn = sqlite3.connect(databasename)
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='fakeCustomers'")
        result = cursor.fetchone()
        conn.close()
        self.assertIsNotNone(result)

    #  The function creates a table named 'fakeCustomers' if it does not exist.
    def test_create_table_if_not_exists(self):
        # Arrange
        databasename = "test.db"
        max_clients = 1000
        max_age = 75

        # Act
        createFakeCustomers(databasename, max_clients, max_age)

        # Assert
        # Check if the table 'fakeCustomers' exists in the database
        conn = sqlite3.connect(databasename)
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='fakeCustomers'")
        result = cursor.fetchone()
        conn.close()
        self.assertIsNotNone(result)

    #  The function uses the Faker library to generate fake data for each customer.
    def test_use_faker_library(self):
        # Arrange
        databasename = "test.db"
        max_clients = 1000
        max_age = 75

        # Act
        createFakeCustomers(databasename, max_clients, max_age)

        # Assert
        # Check if the table 'fakeCustomers' has been populated with data
        conn = sqlite3.connect(databasename)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM fakeCustomers")
        result = cursor.fetchone()
        conn.close()
        self.assertGreater(result[0], 0)

    #  The function should handle the case where the maximum number of clients is zero.
    def test_zero_max_clients(self):
        # Arrange
        databasename = "test.db"
        max_clients = 0
        max_age = 75

        # Act
        createFakeCustomers(databasename, max_clients, max_age)

        # Assert
        # Check if the table 'fakeCustomers' is empty
        conn = sqlite3.connect(databasename)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM fakeCustomers")
        result = cursor.fetchone()
        conn.close()
        self.assertEqual(result[0], 0)

    #  The function should handle the case where the maximum age is less than 18.
    def test_max_age_less_than_18(self):
        # Arrange
        databasename = "test.db"
        max_clients = 1000
        max_age = 17

        # Act
        createFakeCustomers(databasename, max_clients, max_age)

        # Assert
        # Check if the table 'fakeCustomers' is empty
        conn = sqlite3.connect(databasename)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM fakeCustomers")
        result = cursor.fetchone()
        conn.close()
        self.assertEqual(result[0], 0)

    #  The function should handle the case where the maximum age is greater than 120.
    def test_max_age_greater_than_120(self):
        # Arrange
        databasename = "test.db"
        max_clients = 1000
        max_age = 121

        # Act
        createFakeCustomers(databasename, max_clients, max_age)

        # Assert
        # Check if the table 'fakeCustomers' is empty
        conn = sqlite3.connect(databasename)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM fakeCustomers")
        result = cursor.fetchone()
        conn.close()
        self.assertEqual(result[0], 0)
